package com.github.zxhtom.niuke;

import java.util.Scanner;

/**
 * TODO
 *
 * @author zxhtom
 * 2024/8/9
 */
public class Test003 {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        // 注意 hasNext 和 hasNextLine 的区别
        while (in.hasNext()) { // 注意 while 处理多个 case
            String next = in.next();
            int i = minCountsCar3(next.replaceAll(",",""));
            System.out.println(i);
        }
    }
    //1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,
    // 1,1,1,1,0,0,1,1,1,0,1,1
    public static int minCountsCar3(String templateArr){
        int i=0;
        int count=0;
        while(i<templateArr.length()){
            if (templateArr.charAt(i) == '0') {
                //no car
                i++;
            }else{
               count++;
                if ((i + 1) < templateArr.length() && templateArr.charAt(i + 1) == '1') {
                    if ((i + 2) < templateArr.length() && templateArr.charAt(i + 2) == '1') {
                        i += 3;
                    } else {
                        i+=2;
                    }
                }else {
                    i+=1;
                }
            }
        }
        return count;
    }
    public static int minCountsCar(String[] templateArr){
        int num=0;
        for (int i = 0; i < templateArr.length; i++) {
            int n = templateArr[i].length();
            while (n != 0) {
                if (n / 3 != 0) {
                    num+=n/3;
                    n=n%3;
                } else if (n / 2 != 0) {
                    num += n / 2;
                    n = n % 2;
                } else {
                    num+=n;
                    n=0;
                }
            }
        }
        return num;
    }
    public static int minCountsCar2(String templateArr){
        int i=0;
        int count=0;
        while(i<templateArr.length()){
            if (templateArr.charAt(i) == '0') {
                //no car
                i++;
            }else{
                // has car
                int tmpCarLength=1;
                // i +  tmpCarLength  合理范围
                //tmplateArr.charAt(i+tmpCarLength)===1
                while ((i+tmpCarLength)<templateArr.length()&&templateArr.charAt(i + tmpCarLength) == '1') {
                    tmpCarLength++;
                }
                if (tmpCarLength == 1) {
                    count++;
                    break;
                } else if (tmpCarLength == 2) {
                    count+=2;
                    break;
                } else if (tmpCarLength == 3) {
                    count+=3;
                    break;
                }
                i += tmpCarLength;
            }
        }
        return count;
    }
}
